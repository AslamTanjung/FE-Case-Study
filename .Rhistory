lines(forc_roc, col = 'purple')
lines(forc_gjr, col = 'black')
legend("topleft", legend = c("EGARCH", "TRUE", "GARCH", 'realGARCH'), col = c('red', 'blue', 'green', 'purple'), lty=1)
legend("topleft", legend = c("EGARCH", "TRUE", "GARCH", 'realGARCH', 'GJR'), col = c('red', 'blue', 'green', 'purple', 'black'), lty=1)
plot(as.numeric(true_value), type = 'l', col = 'blue')
lines(forc_e, col = 'red')
lines(forc_oc, col = 'green')
lines(forc_roc, col = 'purple')
lines(forc_gjr, col = 'black')
plot(as.numeric(true_value), type = 'l', col = 'blue')
lines(forc_e, col = 'red')
lines(forc_oc, col = 'green')
lines(forc_roc, col = 'purple')
lines(forc_gjr, col = 'black')
lines(forc_roc, col = 'purple')
lines(forc_gjr, col = 'black')
legend("topleft", legend = c("EGARCH", "TRUE", "GARCH", 'realGARCH', 'GJR'), col = c('red', 'blue', 'green', 'purple', 'black'), lty=1)
plot(as.numeric(true_value), type = 'l', col = 'blue')
lines(forc_e, col = 'red')
lines(forc_oc, col = 'green')
lines(forc_roc, col = 'purple')
lines(forc_gjr, col = 'black')
return(as.double(abs(forc-true_value)))
MAE <- function(forc, true_value) {
return(as.double(mean(abs(forc-true_value))))
}
MAE_roc <- MAE(forc_roc, true_value)
MAE_oc <- MAE(forc_oc, true_value)
MAE_gjr <- MAE(forc_gjr, true_value)
MAE_e <- MAE(forc_e, true_value)
MAE_e
MAE <- function(forc, true_value) {
return(as.double(mean(abs(forc-true_value))))
}
MAE_roc <- MAE(forc_roc, true_value)
MAE_oc <- MAE(forc_oc, true_value)
MAE_gjr <- MAE(forc_gjr, true_value)
MAE_e <- MAE(forc_e, true_value)
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
forc_roc-forc_oc
MAE_roc <- MAE(forc_roc, true_value)
MAE_roc
MAE <- function(forc, true_value) {
return(as.double(abs(forc-true_value)))
}
MAE_roc <- MAE(forc_roc, true_value)
MAE_oc <- MAE(forc_oc, true_value)
MAE_gjr <- MAE(forc_gjr, true_value)
MAE_e <- MAE(forc_e, true_value)
MAE <- function(forc, true_value) {
return(as.double((forc-true_value)**2))
}
MAE_roc <- MAE(forc_roc, true_value)
MAE_oc <- MAE(forc_oc, true_value)
MAE_gjr <- MAE(forc_gjr, true_value)
MAE_e <- MAE(forc_e, true_value)
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_e, MAE_gjr, alternative= "two.sided", h = 1)
MAE_roc
MAE <- function(forc, true_value) {
return(as.double(abs(forc-true_value)))
}
MAE_roc <- MAE(forc_roc, true_value)
MAE_oc <- MAE(forc_oc, true_value)
MAE_gjr <- MAE(forc_gjr, true_value)
MAE_e <- MAE(forc_e, true_value)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
MAE <- function(forc, true_value) {
return(as.double(abs(forc-true_value)))
}
# MAE <- function(forc, true_value) {
#   return(as.double((forc-true_value)**2))
# }
MAE_roc <- MAE(forc_roc, true_value)
MAE_oc <- MAE(forc_oc, true_value)
MAE_gjr <- MAE(forc_gjr, true_value)
MAE_e <- MAE(forc_e, true_value)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
#dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_gjr, alternative = "two.sided", h = 1)
source('~/VU/FE Case Study/garch model (R).R', echo=TRUE)
dm.test(MAE_e, MAE_gjr, alternative= "two.sided", h = 1)
#dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_e, MAE_gjr, alternative= "two.sided", h = 1)
dm.test(MAE_roc, MAE_e, alternative = "two.sided", h = 1)
#dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
length(MAE_oc)
length(MAE_roc)
dm.test(MAE_roc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_e, alternative = "two.sided", h = 1)
dm.test(MAE_roc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_gjr, alternative = "two.sided", h = 1)
dm.test(MAE_e, MAE_gjr, alternative= "two.sided", h = 1)
write.csv(MAE_roc, file = "MAE/Open_to_close_RealGARCH_MAE.csv", row.names = FALSE)
MAE_oc <- MAE(forc_oc, true_value)
write.csv(MAE_oc, file = "MAE/Open_to_close_GARCH_MAE.csv", row.names = FALSE)
MAE_gjr <- MAE(forc_gjr, true_value)
write.csv(MAE_gjr, file = "MAE/Open_to_close_GJRGARCH_MAE.csv", row.names = FALSE)
MAE_e <- MAE(forc_e, true_value)
write.csv(MAE_e, file = "MAE/Open_to_close_EGARCH_MAE.csv", row.names = FALSE)
write.csv(forc_roc, file = "Forecasts/Open_to_close_RealGARCH_Forecast.csv", row.names = FALSE)
write.csv(forc_oc, file = "Forecasts/Open_to_close_GARCH_Forecast.csv", row.names = FALSE)
write.csv(forc_gjr, file = "Forecasts/Open_to_close_GJRGARCH_Forecast.csv", row.names = FALSE)
write.csv(forc_e, file = "Forecasts/Open_to_close_EGARCH_Forecast.csv", row.names = FALSE)
library(GAS)
library(readr)
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv")
spec <- UniGASSpec(Dist = "std", ScalingType = "Identity",
GASPar = list(location = FALSE, scale = TRUE,
skewness = FALSE, shape = FALSE, shape2 = FALSE))
fit <- UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
ret
ret$Index <- as.POSIXct(ret$Index,format="%Y-%m-%d %H:%M:%S")
ret <- xts(ret$V1, ret$Index)
library(tsDyn)
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv")
ret$Index <- as.POSIXct(ret$Index,format="%Y-%m-%d %H:%M:%S")
ret <- xts(ret$V1, ret$Index)
library(timeSeries)
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv")
ret$Index <- as.POSIXct(ret$Index,format="%Y-%m-%d %H:%M:%S")
ret <- xts(ret$V1, ret$Index)
?xts
library(xts)
ret <- xts(ret$V1, ret$Index)
spec <- UniGASSpec(Dist = "std", ScalingType = "Identity",
GASPar = list(location = FALSE, scale = TRUE,
skewness = FALSE, shape = FALSE, shape2 = FALSE))
fit <- UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
ret
ret <- ts(ret$V1, ret$Index)
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv")
ret$Index <- as.POSIXct(ret$Index,format="%Y-%m-%d %H:%M:%S")
ret <- ts(ret$V1, ret$Index)
ret <- xts(ret$V1, ret$Index)
ret
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv")
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv", sep = " ")
ret$Index <- as.POSIXct(ret$Index,format="%Y-%m-%d %H:%M:%S")
ret <- xts(ret$V1, ret$Index)
spec <- UniGASSpec(Dist = "std", ScalingType = "Identity",
GASPar = list(location = FALSE, scale = TRUE,
skewness = FALSE, shape = FALSE, shape2 = FALSE))
fit <- UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
library(parallel)
nCores <- detectCores() - 1
nCores
nCores <- detectCores() - 2
cluster <- makeCluster(nCores)
rol_for <- UniGASRoll(ret, spec, ForecastLength = n_test,
RefitEvery = 1, RefitWindow = "moving",
cluster = cluster, Compute.SE = FALSE)
n_test <- 252 *2
rol_for <- UniGASRoll(ret, spec, ForecastLength = n_test,
RefitEvery = 1, RefitWindow = "moving",
cluster = cluster, Compute.SE = FALSE)
rol_for
n_test
Forecast(rol_for)
plot(rol_for)
rol_for
rol_for$Forecast
rol_for@Forecast
rol_for@Forecast$PointForecast
residuals(rol_for)
MAE <- as.numeric(abs(residuals(rol_for)))
MAE <- function(forc, true_value) {
return(as.double(abs(forc-true_value)))
}
MAE_ <- as.numeric(abs(residuals(rol_for)))
MAE_roc <- read.csv("MAE/Open_to_close_RealGARCH_MAE.csv")$x
MAE_oc <- read.csv("MAE/Open_to_close_GARCH_MAE.csv")$x
MAE_e <- read.csv("MAE/Open_to_close_EGARCH_MAE.csv")$x
MAE_gjr <- read.csv("MAE/Open_to_close_GJRGARCH_MAE.csv")$x
write.csv(MAE_gas, file = "MAE/Open_to_close_GAS_MAE.csv", row.names = FALSE)
MAE_gas <- as.numeric(abs(residuals(rol_for)))
write.csv(MAE_gas, file = "MAE/Open_to_close_GAS_MAE.csv", row.names = FALSE)
dm.test(MAE_gas, MAE_roc, alternative = "two.sided", h = 1))
dm.test(MAE_gas, MAE_roc, alternative = "two.sided", h = 1)
library(rugarch)
?dm.test
library(GAS)
library(readr)
library(xts)
library(parallel)
library(dplyr)
library(highfrequency)
library(TTR)
library(rugarch)
library(ggplot2)
library(TSstudio)
library(forecast)
dm.test(MAE_gas, MAE_roc, alternative = "two.sided", h = 1)
?dm.test
getForecast(rol_for)
getMoments(rol_for)
plot(rol_for)
forc_gas <- rol_for@Forecast$Moments
forc_gas
forc_gas <- rol_for@Forecast$Moments[,2]
forc_gas
kernel_cov <- read.csv("RV_kernel.csv", sep = " ")
kernel_cov$Index <- as.POSIXct(kernel_cov$Index,format="%Y-%m-%d %H:%M:%S")
kernel_cov <- xts(kernel_cov$V1, kernel_cov$Index)
true_values <- kernel_cov.tail(n_test)
true_values <- tail(kernel_cov, n_test)
kernel_cov <- read.csv("RV_kernel.csv", sep = " ")
kernel_cov$Index <- as.POSIXct(kernel_cov$Index,format="%Y-%m-%d %H:%M:%S")
kernel_cov <- read.csv("Returns & RV/RV_kernel.csv", sep = " ")
kernel_cov$Index <- as.POSIXct(kernel_cov$Index,format="%Y-%m-%d %H:%M:%S")
kernel_cov <- xts(kernel_cov$V1, kernel_cov$Index)
true_values <- tail(kernel_cov, n_test)
true_values <- tail(kernel_cov, n_test)
forc_gas <- rol_for@Forecast$Moments[,2]
MAE_gas <- as.numeric(abs(forc_gas - true_values)
MAE_gas <- as.numeric(abs(forc_gas - true_values))
write.csv(MAE_gas, file = "MAE/Open_to_close_GAS_MAE.csv", row.names = FALSE)
MAE_roc <- read.csv("MAE/Open_to_close_RealGARCH_MAE.csv")$x
MAE_oc <- read.csv("MAE/Open_to_close_GARCH_MAE.csv")$x
MAE_e <- read.csv("MAE/Open_to_close_EGARCH_MAE.csv")$x
MAE_gjr <- read.csv("MAE/Open_to_close_GJRGARCH_MAE.csv")$x
dm.test(MAE_gas, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
forc_gas <- np.sqrt(rol_for@Forecast$Moments[,2])
MAE_gas <- as.numeric(abs(forc_gas - true_values))
forc_gas <- sqrt(rol_for@Forecast$Moments[,2])
MAE_gas <- as.numeric(abs(forc_gas - true_values))
write.csv(MAE_gas, file = "MAE/Open_to_close_GAS_MAE.csv", row.names = FALSE)
dm.test(MAE_gas, MAE_roc, alternative = "two.sided", h = 1)
lines(forc_gas, col = 'brown')
plot(as.numeric(true_value), type = 'l', col = 'blue')
plot(as.numeric(true_value), type = 'l', col = 'blue')
true_value <- tail(kernel_cov, n_test)
plot(as.numeric(true_value), type = 'l', col = 'blue')
lines(forc_e, col = 'red')
lines(forc_oc, col = 'green')
plot(as.numeric(true_value), type = 'l', col = 'blue')
plot(as.numeric(true_value), type = 'l', col = 'blue')
lines(forc_e, col = 'red')
forc_roc <- read.csv("Forecasts/Open_to_close_RealGARCH_Forecast.csv")$x
forc_oc <- read.csv("Forecasts/Open_to_close_GARCH_Forecast.csv")$x
forc_e <- read.csv("Forecasts/Open_to_close_EGARCH_Forecast.csv")$x
forc_gjr <- read.csv("Forecasts/Open_to_close_GJRGARCH_Forecast.csv")$x
lines(forc_e, col = 'red')
lines(forc_oc, col = 'green')
lines(forc_roc, col = 'purple')
lines(forc_gjr, col = 'black')
lines(forc_gas, col = 'brown')
legend("topleft", legend = c("E", "TRUE", "GARCH", 'real', 'GJR', 'GAS'), col = c('red', 'blue', 'green', 'purple', 'black', 'brown'), lty=1)
zm()
plot(as.numeric(true_value), type = 'l', col = 'blue', x_lim = 100)
plot(as.numeric(true_value), type = 'l', col = 'blue', x_lim = 100)
plot(as.numeric(true_value), type = 'l', col = 'blue', xlim = c(0,100))
lines(forc_gas, col = 'brown')
lines(forc_gjr, col = 'black')
lines(forc_roc, col = 'purple')
lines(forc_oc, col = 'green')
lines(forc_e, col = 'red')
legend("topleft", legend = c("E", "TRUE", "GARCH", 'real', 'GJR', 'GAS'), col = c('red', 'blue', 'green', 'purple', 'black', 'brown'), lty=1)
nCores <- detectCores() - 1
cluster <- makeCluster(nCores)
kernel_cov <- read.csv("Returns & RV/RV_kernel.csv", sep = " ")
kernel_cov$Index <- as.POSIXct(kernel_cov$Index,format="%Y-%m-%d %H:%M:%S")
kernel_cov <- xts(kernel_cov$V1, kernel_cov$Index)
ret <- read.csv(file = "Returns & RV/Open_to_close_log_returns.csv", sep = " ")
ret$Index <- as.POSIXct(ret$Index,format="%Y-%m-%d %H:%M:%S")
ret <- xts(ret$V1, ret$Index)
spec <- UniGASSpec(Dist = "std", ScalingType = "Identity",
GASPar = list(location = TRUE, scale = TRUE,
skewness = TRUE, shape = TRUE, shape2 = TRUE))
fit <- UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
n_test <- 252 *2
rol_for <- UniGASRoll(ret, spec, ForecastLength = n_test,
RefitEvery = 1, RefitWindow = "moving",
cluster = cluster, Compute.SE = FALSE)
true_value <- tail(kernel_cov, n_test)
forc_gas <- sqrt(rol_for@Forecast$Moments[,2])
write.csv(forc_gas, file = "Forecasts/Open_to_close_GAS_Forecast.csv", row.names = FALSE)
MAE_gas <- as.numeric(abs(forc_gas - true_value))
write.csv(MAE_gas, file = "MAE/Open_to_close_GAS_MAE.csv", row.names = FALSE)
dm.test(MAE_gas, MAE_roc, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
plot(as.numeric(true_value), type = 'l', col = 'blue', xlim = c(0,100))
lines(forc_gas, col = 'brown')
lines(forc_gjr, col = 'black')
lines(forc_roc, col = 'purple')
lines(forc_oc, col = 'green')
lines(forc_e, col = 'red')
MAE_gas
mean(MAE_gas)
spec <- UniGASSpec(Dist = "std", ScalingType = "Inv",
GASPar = list(location = TRUE, scale = TRUE,
skewness = TRUE, shape = TRUE, shape2 = TRUE))
roll_for
rol_for
spec_gas_std
name <- "sstd"
spec <- UniGASSpec(
Dist = name,
ScalingType = "InvSqrt",
GASPar = list(
location = TRUE,
scale = TRUE,
skewness = TRUE,
shape = TRUE,
shape2 = TRUE
)
)
fit <-
UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit
print(name, scaling)
scaling <- "Identity"
print(name, scaling)
print(paste0(name, scaling))
print(paste(name, scaling))
n_test <- 252 * 2
for (name in c(
"norm",
"snorm",
"std",
"sstd",
"ast",
"ast1",
"ald",
"poi",
"gamma",
"exp",
"beta",
"negbin",
"skellam",
"mvnorm",
"mvt"
)){
for(scaling in c("Identity", "Inv", "InvSqrt")) {
print(paste(name, scaling))
spec <- UniGASSpec(
Dist = name,
ScalingType = scaling,
GASPar = list(
location = TRUE,
scale = TRUE,
skewness = TRUE,
shape = TRUE,
shape2 = TRUE
)
)
# fit <-
#    UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
rol_for <- UniGASRoll(
ret,
spec,
ForecastLength = n_test,
RefitEvery = 1,
RefitWindow = "moving",
cluster = cluster,
Compute.SE = FALSE
)
true_value <- tail(kernel_cov, n_test)
forc_gas <- sqrt(rol_for@Forecast$Moments[, 2])
write.csv(
forc_gas,
file = paste0("Forecasts/Open_to_close_GAS_", name, "_Forecast.csv"),
row.names = FALSE
)
MAE_gas <- as.numeric(abs(forc_gas - true_value))
write.csv(
MAE_gas,
file = paste0("MAE/Open_to_close_GAS_", name, "_MAE.csv"),
row.names = FALSE
)
}
}
for (name in c(
"norm",
"snorm",
"std",
"sstd",
"ast",
"ast1",
"ald",
"poi",
"gamma",
"exp",
"beta",
"negbin",
"skellam",
"mvnorm",
"mvt"
)){
for(scaling in c("Identity", "Inv", "InvSqrt")) {
print(paste(name, scaling))
spec <- UniGASSpec(
Dist = name,
ScalingType = scaling,
GASPar = list(
location = TRUE,
scale = TRUE,
skewness = TRUE,
shape = TRUE,
shape2 = TRUE
)
)
# fit <-
#    UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
rol_for <- UniGASRoll(
ret,
spec,
ForecastLength = n_test,
RefitEvery = 1,
RefitWindow = "moving",
cluster = cluster,
Compute.SE = FALSE
)
true_value <- tail(kernel_cov, n_test)
forc_gas <- sqrt(rol_for@Forecast$Moments[, 2])
write.csv(
forc_gas,
file = paste0("Forecasts/Open_to_close_GAS_", name, "_Forecast.csv"),
row.names = FALSE
)
MAE_gas <- as.numeric(abs(forc_gas - true_value))
write.csv(
MAE_gas,
file = paste0("MAE/Open_to_close_GAS_", name, "_MAE.csv"),
row.names = FALSE
)
}
}
n_test <- 252 * 2
for (name in c(
"norm",
"snorm",
"std",
"sstd",
"ast",
"ast1",
"ald",
"poi",
"gamma",
"exp",
"beta",
"negbin",
"skellam"
)){
for(scaling in c("Identity", "Inv", "InvSqrt")) {
print(paste(name, scaling))
spec <- UniGASSpec(
Dist = name,
ScalingType = scaling,
GASPar = list(
location = TRUE,
scale = TRUE,
skewness = TRUE,
shape = TRUE,
shape2 = TRUE
)
)
# fit <-
#    UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
rol_for <- UniGASRoll(
ret,
spec,
ForecastLength = n_test,
RefitEvery = 1,
RefitWindow = "moving",
cluster = cluster,
Compute.SE = FALSE
)
true_value <- tail(kernel_cov, n_test)
forc_gas <- sqrt(rol_for@Forecast$Moments[, 2])
write.csv(
forc_gas,
file = paste0("Forecasts/Open_to_close_GAS_", name, "_", scaling, "_Forecast.csv"),
row.names = FALSE
)
MAE_gas <- as.numeric(abs(forc_gas - true_value))
write.csv(
MAE_gas,
file = paste0("MAE/Open_to_close_GAS_", name, "_", scaling, "_MAE.csv"),
row.names = FALSE
)
}
}
