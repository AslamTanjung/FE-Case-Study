kernel_cov <- kernel_cov * 10000
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = 0, realizedVol = kernel_cov[2:length(kernel_cov)]*10000)
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = 0, realizedVol = kernel_cov[2:length(kernel_cov)])
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc <- ugarchfit(spec, ret_oc[2:length(ret_oc)], solver = 'hybrid', out.sample = 0, realizedVol = kernel_cov[2:length(kernel_cov)])
true_value <-
forc1 <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
forc1
true_value <- kernel_cov[-1]
forc1 <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
true_value
true_value <- kernel_cov[length(kernel_cov):length(kernel_cov)]
forc1 <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
forc1
MAE <- abs(forc-true_value)
forc <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
MAE <- abs(forc-true_value)
MAE
forc <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))[[1]]
MAE <- abs(forc-true_value)
MAE
forc <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))[[1,1]]
MAE <- abs(forc-true_value)
MAE
forc
as.double(forc)
forc <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
MAE <- abs(forc-true_value)
MAE
forc
forc <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))[[1]]
MAE <- abs(forc-true_value)
MAE
MAE <- as.double(abs(forc-true_value))
MAE
true_value <- kernel_cov[length(kernel_cov):length(kernel_cov)]
forc <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
MAE <- as.double(abs(forc-true_value))
MAE
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = 1, n.roll = 0))
MAE_oc <- as.double(abs(forc_oc - true_value))
MAE_close <- as.double(abs(forc_close-true_value))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = 1, n.roll = 0))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = 1, n.roll = 0))
MAE_close <- as.double(abs(forc_close-true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
MAE_close
MAE_oc
forc_oc
forc_close
library(dm.test)
install.packages("dm.test")
dm.test(MAE_close, MAE_oc, alternative = "two.sided", h = 1)
library(dm.test)
library(forecast)
dm.test(MAE_close, MAE_oc, alternative = "two.sided", h = 1)
## Close-to-close
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = 25, realizedVol = kernel_cov[2:length(kernel_cov)])
## Open-to-close
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc <- ugarchfit(spec, ret_oc[2:length(ret_oc)], solver = 'hybrid', out.sample = 25, realizedVol = kernel_cov[2:length(kernel_cov)])
n_test <- 25
## Close-to-close
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = n_test, realizedVol = kernel_cov[2:length(kernel_cov)])
## Open-to-close
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc <- ugarchfit(spec, ret_oc[2:length(ret_oc)], solver = 'hybrid', out.sample = n_test, realizedVol = kernel_cov[2:length(kernel_cov)])
## Mean absolute value
true_value <- kernel_cov[length(kernel_cov)-n_test-1:length(kernel_cov)]
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test-1):length(kernel_cov)]
true_value
length(true_value)
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
true_value
length(true_value)
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 0))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 0))
MAE_close <- as.double(abs(forc_close - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
MAE_close
dm.test(MAE_close, MAE_oc, alternative = "two.sided", h = 1)
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'GARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec_close, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = n_test)
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'GARCH', garchOrder = c(1, 1)), distribution.model = "norm")
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'gARCH', garchOrder = c(1, 1)), distribution.model = "norm")
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'garch', garchOrder = c(1, 1)), distribution.model = "norm")
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'GARCH', garchOrder = c(1, 1)), distribution.model = "norm")
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec_close, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = n_test)
fit_close_real <- ugarchfit(spec_close_real, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = n_test, realizedVol = kernel_cov[2:length(kernel_cov)])
## Close-to-close
spec_close_real <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close_real <- ugarchfit(spec_close_real, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = n_test, realizedVol = kernel_cov[2:length(kernel_cov)])
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec_close, ret_close[2:length(ret_close)], solver = 'hybrid', out.sample = n_test)
## Open-to-close
spec_oc <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc <- ugarchfit(spec_oc, ret_oc[2:length(ret_oc)], solver = 'hybrid', out.sample = n_test)
## Open-to-close
spec_oc <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc <- ugarchfit(spec_oc, ret_oc[2:length(ret_oc)], solver = 'hybrid', out.sample = n_test)
spec_oc_real <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc_real <- ugarchfit(spec_oc_real, ret_oc[2:length(ret_oc)], solver = 'hybrid', out.sample = n_test, realizedVol = kernel_cov[2:length(kernel_cov)])
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 0))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 0))
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close_real <- as.double(abs(forc_close_real - true_value))
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 0))
forc_oc_real <- sigma(ugarchforecast(fit_oc_real, n.ahead = n_test, n.roll = 0))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 0))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 0))
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close_real <- as.double(abs(forc_close_real - true_value))
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 1)
MAE_oc_real <- as.double(abs(forc_oc_real - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_oc, MAE_oc_real, alternative = "two.sided", h = 1)
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 1)
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 2)
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_oc_real, alternative = "two.sided", h = 1)
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 1))
forc_oc_real <- sigma(ugarchforecast(fit_oc_real, n.ahead = n_test, n.roll = 1))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 1))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 1))
MAE_close <- as.double(abs(forc_close - true_value))
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test-1):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 1))
forc_oc_real <- sigma(ugarchforecast(fit_oc_real, n.ahead = n_test, n.roll = 1))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 1))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 1))
MAE_close <- as.double(abs(forc_close - true_value))
length(true_value)
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 1))
forc_oc_real <- sigma(ugarchforecast(fit_oc_real, n.ahead = n_test, n.roll = 1))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 1))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 1))
MAE_close <- as.double(abs(forc_close - true_value))
length(true_value)
length(forc_close)
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 0))
forc_oc_real <- sigma(ugarchforecast(fit_oc_real, n.ahead = n_test, n.roll = 0))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 0))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 0))
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close_real <- as.double(abs(forc_close_real - true_value))
## Mean absolute value
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 0))
forc_oc_real <- sigma(ugarchforecast(fit_oc_real, n.ahead = n_test, n.roll = 0))
forc_close <- sigma(ugarchforecast(fit_close, n.ahead = n_test, n.roll = 0))
forc_oc <- sigma(ugarchforecast(fit_oc, n.ahead = n_test, n.roll = 0))
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close_real <- as.double(abs(forc_close_real - true_value))
MAE_oc_real <- as.double(abs(forc_oc_real - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 1)
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_oc_real, alternative = "two.sided", h = 1)
print(forc_close_real)
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = n_test, n.roll = 1))
forc_close_real
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = 1, n.roll = 1))
forc_close_real
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = 1, n.roll = n_test))
forc_close_real
MAE_close_real <- as.double(abs(forc_close_real - true_value))
MAE_close_real <- as.double(abs(forc_close_real.T - true_value))
MAE_close_real <- as.double(abs(t(forc_close_real) - true_value))
length(forc_close_real)
length(true_value)
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test):length(kernel_cov)]
forc_close_real <- sigma(ugarchforecast(fit_close_real, n.ahead = 1, n.roll = n_test))
MAE_close_real <- as.double(abs(t(forc_close_real) - true_value))
MAE_close_real
true_value
forc_close_real
modelroll=ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = 100,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = TRUE, VaR.alpha = c(0.01,
0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll
modelroll@forecast
modelroll@model
modelroll <- ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = 10,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll@forecast
modelroll@forecast
modelroll@forecast$density[,"Sigma"]
modelroll_close <- ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_oc <- ugarchroll (
spec=spec_oc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_rclose <- ugarchroll (
spec=spec_rclose, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_roc <- ugarchroll (
spec=spec_roc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
## General model
## We could also compare the performance between GARCH(1,1) and GARCH(1,2).
## We never try multiple order for p, otherwise we will have substantial multicollinearity
## Close-to-close
spec_rclose <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_rclose <- ugarchfit(spec_rclose, ret_close[2:length(ret_close)], solver = 'hybrid', realizedVol = kernel_cov[2:length(kernel_cov)])
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_close <- ugarchfit(spec_close, ret_close[2:length(ret_close)], solver = 'hybrid')
## Open-to-close
spec_oc <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_oc <- ugarchfit(spec_oc, ret_oc[2:length(ret_oc)], solver = 'hybrid')
spec_roc <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "norm")
fit_roc <- ugarchfit(spec_roc, ret_oc[2:length(ret_oc)], solver = 'hybrid', realizedVol = kernel_cov[2:length(kernel_cov)])
modelroll_close <- ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
## Rolling window forecast with re-estimation
n_test <- 25
modelroll_oc <- ugarchroll (
spec=spec_oc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_rclose <- ugarchroll (
spec=spec_rclose, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_roc <- ugarchroll (
spec=spec_roc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_rclose <- ugarchroll (
spec=spec_rclose, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE, realizedVol = kernel_cov[2:length(kernel_cov)]
)
modelroll_close <- ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_oc <- ugarchroll (
spec=spec_oc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE
)
modelroll_rclose <- ugarchroll (
spec=spec_rclose, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE, realizedVol = kernel_cov[2:length(kernel_cov)]
)
modelroll_roc <- ugarchroll (
spec=spec_roc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, keep.coef = TRUE, realizedVol = kernel_cov[2:length(kernel_cov)]
)
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test):length(kernel_cov)]
forc_rclose <- modelroll_rclose@forecast$density[,"Sigma"]
forc_roc <- modelroll_roc@forecast$density[,"Sigma"]
forc_close <- modelroll_close@forecast$density[,"Sigma"]
forc_oc <- modelroll_oc@forecast$density[,"Sigma"]
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
length(forc_rclose)
length(true_value)
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_rclose <- modelroll_rclose@forecast$density[,"Sigma"]
forc_roc <- modelroll_roc@forecast$density[,"Sigma"]
forc_close <- modelroll_close@forecast$density[,"Sigma"]
forc_oc <- modelroll_oc@forecast$density[,"Sigma"]
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close_real <- as.double(abs(t(forc_close_real) - true_value))
MAE_oc_real <- as.double(abs(forc_oc_real - true_value))
MAE_close_real <- as.double(abs(forc_close_real - true_value))
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close_real <- as.double(abs(forc_rclose - true_value))
MAE_oc_real <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_close_real, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_oc_real, alternative = "two.sided", h = 1)
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
MAE_rclose <- as.double(abs(forc_rclose - true_value))
MAE_roc <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
MAE_close
MAE_rclose
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value))
MAE_rclose <- as.double(abs(forc_rclose - true_value))
MAE_roc <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
modelroll_roc <- ugarchroll (
spec=spec_roc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, realizedVol = kernel_cov[2:length(kernel_cov)]
)
MAE_close
forc_close
true_value
factor <- var(ret_close[1:(length(ret_close)-n_test)])/mean(kernel_cov[1:(length(kernel_cov)-ntest)])
factor <- var(ret_close[1:(length(ret_close)-n_test)])/mean(kernel_cov[1:(length(kernel_cov)-n_test)])
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value * factor))
MAE_rclose <- as.double(abs(forc_rclose - true_value * factor))
factor
mean(kernel_cov[1:(length(kernel_cov)-n_test)])
var(ret_close[1:(length(ret_close)-n_test)])
ret_close[1:(length(ret_close)-n_test)] == NA
ret_close[1:(length(ret_close)-n_test)]
sum(is.na(ret_close[1:(length(ret_close)-n_test)]))
factor <- var(ret_close[2:(length(ret_close)-n_test)])/mean(kernel_cov[2:(length(kernel_cov)-n_test)])
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value * factor))
factor <- var(ret_close[2:(length(ret_close)-n_test)])/mean(kernel_cov[2:(length(kernel_cov)-n_test)])
factor
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value * factor))
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value%*% factor))
MAE_rclose <- as.double(abs(forc_rclose - true_value %*% factor))
MAE_close
MAE_rclose
MAE_roc <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
modelroll_close
true_value
## Rolling window forecast with re-estimation
n_test <- 100
modelroll_close <- ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL
)
modelroll_oc <- ugarchroll (
spec=spec_oc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL
)
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_rclose <- modelroll_rclose@forecast$density[,"Sigma"]
forc_roc <- modelroll_roc@forecast$density[,"Sigma"]
forc_close <- modelroll_close@forecast$density[,"Sigma"]
forc_oc <- modelroll_oc@forecast$density[,"Sigma"]
modelroll_rclose <- ugarchroll (
spec=spec_rclose, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, realizedVol = kernel_cov[2:length(kernel_cov)]
)
modelroll_roc <- ugarchroll (
spec=spec_roc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, realizedVol = kernel_cov[2:length(kernel_cov)]
)
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_rclose <- modelroll_rclose@forecast$density[,"Sigma"]
forc_roc <- modelroll_roc@forecast$density[,"Sigma"]
forc_close <- modelroll_close@forecast$density[,"Sigma"]
forc_oc <- modelroll_oc@forecast$density[,"Sigma"]
factor <- var(ret_close[2:(length(ret_close)-n_test)])/mean(kernel_cov[2:(length(kernel_cov)-n_test)])
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value%*% factor))
MAE_rclose <- as.double(abs(forc_rclose - true_value %*% factor))
MAE_roc <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
kernel_cov
true_value
k <- kernel_cov
################################################################################
################################################################################
kernel_cov <- cov
kernel_cov <- kernel_cov * 10000
## General model
## We could also compare the performance between GARCH(1,1) and GARCH(1,2).
## We never try multiple order for p, otherwise we will have substantial multicollinearity
## Close-to-close
spec_rclose <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "sstd")
fit_rclose <- ugarchfit(spec_rclose, ret_close[2:length(ret_close)], solver = 'hybrid', realizedVol = kernel_cov[2:length(kernel_cov)])
spec_close <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "sstd")
fit_close <- ugarchfit(spec_close, ret_close[2:length(ret_close)], solver = 'hybrid')
fit_oc <- ugarchfit(spec_oc, ret_oc[2:length(ret_oc)], solver = 'hybrid')
spec_roc <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)), distribution.model = "sstd")
fit_roc <- ugarchfit(spec_roc, ret_oc[2:length(ret_oc)], solver = 'hybrid', realizedVol = kernel_cov[2:length(kernel_cov)])
## Open-to-close
spec_oc <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = "sstd")
modelroll_close <- ugarchroll (
spec=spec_close, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL
)
## Rolling window forecast with re-estimation
n_test <- 100
modelroll_oc <- ugarchroll (
spec=spec_oc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL
)
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_rclose <- modelroll_rclose@forecast$density[,"Sigma"]
forc_roc <- modelroll_roc@forecast$density[,"Sigma"]
forc_close <- modelroll_close@forecast$density[,"Sigma"]
forc_oc <- modelroll_oc@forecast$density[,"Sigma"]
factor <- var(ret_close[2:(length(ret_close)-n_test)])/mean(kernel_cov[2:(length(kernel_cov)-n_test)])
MAE_rclose <- as.double(abs(forc_rclose - true_value %*% factor))
MAE_roc <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
modelroll_rclose <- ugarchroll (
spec=spec_rclose, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, realizedVol = kernel_cov[2:length(kernel_cov)]
)
modelroll_roc <- ugarchroll (
spec=spec_roc, data=ret_oc[2:length(ret_oc)], n.ahead = 1, forecast.length = n_test,
refit.every = 1, refit.window = c("recursive"),
solver = "hybrid", calculate.VaR = TRUE, VaR.alpha = c(0.01,0.05),
cluster = NULL, realizedVol = kernel_cov[2:length(kernel_cov)]
)
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value%*% factor))
## Forecasts
true_value <- kernel_cov[(length(kernel_cov)-n_test+1):length(kernel_cov)]
forc_rclose <- modelroll_rclose@forecast$density[,"Sigma"]
forc_roc <- modelroll_roc@forecast$density[,"Sigma"]
forc_close <- modelroll_close@forecast$density[,"Sigma"]
forc_oc <- modelroll_oc@forecast$density[,"Sigma"]
factor <- var(ret_close[2:(length(ret_close)-n_test)])/mean(kernel_cov[2:(length(kernel_cov)-n_test)])
## Mean Absolute Value
MAE_close <- as.double(abs(forc_close - true_value%*% factor))
MAE_rclose <- as.double(abs(forc_rclose - true_value %*% factor))
MAE_roc <- as.double(abs(forc_roc - true_value))
MAE_oc <- as.double(abs(forc_oc - true_value))
dm.test(MAE_close, MAE_rclose, alternative = "two.sided", h = 1)
dm.test(MAE_oc, MAE_roc, alternative = "two.sided", h = 1)
