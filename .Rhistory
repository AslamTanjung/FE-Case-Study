}
MAE_value <- MAE(forc, true_value)
write.csv(MAE_value, file = paste0("MAE/", return_name, "vol_", name, "_MAE.csv"), row.names = FALSE)
}
## Plots
files <- tibble(File = list.files("Forecasts", pattern = "^CCvol", full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File))
return_name <- "CC"
## Plots
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File))
par(mfrow = c(3, 3), mar = numeric(4))
for(i in 1:nrow(files)){
name <- files$name[i]
file <- files$File[i]
forc <- read.csv(file, sep = " ")$x
if(grepl("GARCH", name)){
print('bad')
forc <- forc**2
}
plot(as.numeric(kernel_cov), type = "l", xlab = "", ylab = "Vol", xaxt= 'n', yaxt = 'n')
lines(forc, col = "red")
legend(x = 'topleft', legend = name, col = "red", lty = 1)
}
for(i in 1:nrow(files)){
name <- files$name[i]
file <- files$File[i]
forc <- read.csv(file, sep = " ")$x
if(grepl("GARCH", name)){
print('bad')
forc <- forc**2
}
plot(as.numeric(true_value), type = "l", xlab = "", ylab = "Vol", xaxt= 'n', yaxt = 'n')
lines(forc, col = "red")
legend(x = 'topleft', legend = name, col = "red", lty = 1)
}
return_name <- "OC"
## Plots
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File))
par(mfrow = c(3, 3), mar = numeric(4))
for(i in 1:nrow(files)){
name <- files$name[i]
file <- files$File[i]
forc <- read.csv(file, sep = " ")$x
if(grepl("GARCH", name)){
print('bad')
forc <- forc**2
}
plot(as.numeric(true_value), type = "l", xlab = "", ylab = "Vol", xaxt= 'n', yaxt = 'n')
lines(forc, col = "red")
legend(x = 'topleft', legend = name, col = "red", lty = 1)
}
## Plots
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File))
## Plots
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
par(mfrow = c(3, 3), mar = numeric(4))
for(i in 1:nrow(files)){
name <- files$name[i]
file <- files$File[i]
forc <- read.csv(file, sep = " ")$x
if(grepl("GARCH", name)){
print('bad')
forc <- forc**2
}
plot(as.numeric(true_value), type = "l", xlab = "", ylab = "Vol", xaxt= 'n', yaxt = 'n')
lines(forc, col = "red")
legend(x = 'topleft', legend = name, col = "red", lty = 1)
}
## Plots
return_name <- "OC"
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
par(mfrow = c(3, 3), mar = numeric(4))
for(i in 1:nrow(files)){
name <- files$name[i]
file <- files$File[i]
forc <- read.csv(file, sep = " ")$x
if(grepl("GARCH", name)){
print(name)
forc <- forc**2
}
plot(as.numeric(true_value), type = "l", xlab = "", ylab = "Vol", xaxt= 'n', yaxt = 'n')
lines(forc, col = "red")
legend(x = 'topleft', legend = name, col = "red", lty = 1)
}
## Plots
return_name <- "CC"
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
par(mfrow = c(3, 3), mar = numeric(4))
for(i in 1:nrow(files)){
name <- files$name[i]
file <- files$File[i]
forc <- read.csv(file, sep = " ")$x
if(grepl("GARCH", name)){
print(name)
forc <- forc**2
}
plot(as.numeric(true_value), type = "l", xlab = "", ylab = "Vol", xaxt= 'n', yaxt = 'n')
lines(forc, col = "red")
legend(x = 'topleft', legend = name, col = "red", lty = 1)
}
files <- tibble(File = list.files("MAE", pattern = "^OCvol|^Open_to_close", full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_MAE.*','\\1',File))
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " vs ", name2, ": DM statistic = -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " vs ", name2, ": DM statistic = ", stat, "\n"))
}
}
return_name <- "OC"
files <- tibble(File = list.files("Forecasts", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_Forecast.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " vs ", name2, ": DM statistic = -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " vs ", name2, ": DM statistic = ", stat, "\n"))
}
}
warnings()
return_name <- "OC"
files <- tibble(File = list.files("MAE", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_MAE.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
files
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " vs ", name2, ": DM statistic = -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " vs ", name2, ": DM statistic = ", stat, "\n"))
}
}
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " - ", name2, ": -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " - ", name2, ":", stat, "\n"))
}
}
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " - ", name2, ": -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " - ", p, "-", name2, ":", stat, "\n"))
}
}
return_name <- "CC"
files <- tibble(File = list.files("MAE", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_MAE.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " - ", name2, ": -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " - ", p, "-", name2, ":", stat, "\n"))
}
}
return_name <- "CC"
files <- tibble(File = list.files("MAE", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_MAE.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " - ", name2, ": -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " - ", name2, ":", stat, "\n"))
}
}
return_name <- "OC"
files <- tibble(File = list.files("MAE", pattern = paste0("^", return_name, "vol"), full.names = TRUE)) %>%
mutate(name =  gsub('.*vol_(.*)_MAE.*','\\1',File)) %>%
filter(name != "RealGARCHTEST")
for(i in 1:nrow(files)){
for(j in 1:nrow(files)) {
name2 <- files$name[j]
file2 <- files$File[j]
MAE2 <- read.csv(file2, sep = " ")$x
name1 <- files$name[i]
file1 <- files$File[i]
MAE1 <- read.csv(file1, sep = " ")$x
if(all(MAE1 == MAE2)) {
cat(paste0(name1, " - ", name2, ": -\n"))
next
}
dm <- dm.test(MAE1, MAE2)
stat <- round(dm$statistic,2)
p <- round(dm$p.value, 5)
if(p < 0.05){
stat <- paste0(stat, "*")
}
cat(paste0(name1, " - ", name2, ":", stat, "\n"))
}
}
#kernel_cov <- as.numeric(xts(kernel_cov$V1, kernel_cov$Index))
ret <-
read.csv(file = "Returns & RV/Open_to_close_log_returns.csv", sep = " ")
ret$Index <- as.POSIXct(ret$Index, format = "%Y-%m-%d %H:%M:%S")
ret <- xts(ret$V1, ret$Index)
name <- "std"
spec <- UniGASSpec(
Dist = name,
ScalingType = scaling,
GASPar = list(
location = TRUE,
scale = TRUE,
skewness = TRUE,
shape = TRUE,
shape2 = TRUE
)
)
fit <-
UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit
fit@Estimates
fit@Estimates$IC
fit@Estimates$StaticFit
fit@Estimates$lParList
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
sim <- UniGASSim(fit = fit, T.sim = 10000)
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
sim
sim <- getObs(UniGASSim(fit = fit, T.sim = 10000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit
fit_sim
fit$estimates
fit@Estimates$vU
fit@Estimates$IC
fit@ModelInfo
fit@GASDyn
fit@GASDyn$mTheta
fit@Estimates$StaticFit
coef(fit)
fit@Estimates$lParList
std(fit)
fit@Estimates$lParList$vKappa
l <- summary(fit)
l
summary(fit)
fit
show(fit)
l <- show(fit)
fit
fit@Testing
plot(fit)
fit_sim
estimates(fit)
fit@Estimates$optimiser
fit@Estimates$optimiser$hessian
fit@Estimates$optimiser$hessian[0]
fit@Estimates$optimiser$hessian[[1]
fit@Estimates$optimiser$hessian[[1,1]]
fisher_info<-solve(-fit_sim@Estimates$optimiser$hessian)
prop_sigma<-sqrt(diag(fisher_info))
fisher_info
fisher_info<-solve(fit_sim@Estimates$optimiser$hessian)
prop_sigma<-sqrt(diag(fisher_info))
diag(prop_sigma)
diag(fisher_info)
c((1,0,0), (0,1,0))
c(c(1,0,0), c(0,1,0))
sim <- getObs(UniGASSim(kappa = c(0,0,0), A = cbind(c(1,0,0), c(0,1,0), c(0,0,1)), B = cbind(c(1,0,0), c(0,1,0), c(0,0,1)),  T.sim = 10000))
sim <- getObs(UniGASSim(spec = spec, kappa = c(0,0,0), A = cbind(c(1,0,0), c(0,1,0), c(0,0,1)), B = cbind(c(1,0,0), c(0,1,0), c(0,0,1)),  T.sim = 10000))
sim <- getObs(UniGASSim(spec = spec, kappa = c(0,0,0), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
sim <- getObs(UniGASSim(kappa = c(0,0,0), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
l <- UniGASSim(kappa = c(0,0,0), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000)
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- cbind(c(1,0,0), c(0,1,0), c(0,0,1))
matrix
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- as.matrix(cbind(c(1,0,0), c(0,1,0), c(0,0,1)))
sim <- getObs(UniGASSim(kappa = c(0,0,0), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- diag(1, 3, 3)
matrix
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- matrix(diag(1, 3, 3))
matrix
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- diag(1, 3, 3)
sim <- getObs(UniGASSim(kappa = c(0,0,0), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
solve(matrix)
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- matrix(c(0.5 , 0.0 , 0.0 ,
0.0 , 0, 0.0 ,
0.0 , 0.0 , 0.0),3,byrow = TRUE)
sim <- getObs(UniGASSim(kappa = c(0,0,0), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit_sim
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- matrix(c(0.5 , 0.0 , 0.0 ,
0.0 , 0.5, 0.0 ,
0.0 , 0.0 , 0.5),3,byrow = TRUE)
sim <- getObs(UniGASSim(kappa = c(1,1,1), A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit_sim
fisher_info<-solve(fit_sim@Estimates$optimiser$hessian)
prop_sigma<-sqrt(diag(fisher_info))
prop_sigma<-diag(prop_sigma)
upper<-fit$par+1.96*prop_sigma
upper<-fit_sim@Estimates$lParList +1.96*prop_sigma
fit_sim@Estimates
fit_sim@Estimates$lParList
prop_sigma
fit_sim
std <- c(0.18773703,
0.05799213,
54.41411164,
0.08009217,
0.02090013,
0.24635290,
0.09275638,
0.02845753,
0.57660717)
fit_sim
ThetaStar <- c(0.1, 1.5, 7.0)
kappa <- (diag(3) - B) %*% UniUnmapParameters(ThetaStar, "std")
kappa <- (diag(3) - matrix) %*% UniUnmapParameters(ThetaStar, "std")
kappa
sim <- getObs(UniGASSim(kappa = kappa, A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit_sim
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
matrix <- diag(0.5, 3, 3)
ThetaStar <- c(0.1, 1.5, 7.0)
kappa <- (diag(3) - matrix) %*% UniUnmapParameters(ThetaStar, "std")
sim <- getObs(UniGASSim(kappa = kappa, A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
upper<- estimates +1.96*std_errors
lower<-estimates-1.96*std_errors
estimates <- c(0.05427778, 0.19931094, -0.06164370, 0.50866837, 0.48738771, 0.05156327, 0.45007605, 0.50408632, 0.97757690)
std_errors <- c(0.01137666, 0.02012521, 0.07921905, 0.02038118, 0.02831495, 0.19105256, 0.02845361, 0.03908728, 0.02881307)
interval<-data.frame(value=c(kappa, rep(0.5, 6)), upper=upper, lower=lower)
upper<- estimates +1.96*std_errors
lower<-estimates-1.96*std_errors
interval<-data.frame(value=c(kappa, rep(0.5, 6)), upper=upper, lower=lower)
interval
interval<-data.frame(value=c(kappa, rep(0.5, 6)), lower=lower,  upper=upper)
interval
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
d <- c(0.5, 0.5, 0)
matrix <- diag(d, 3, 3)
matrix
ThetaStar <- c(0.1, 1.5, 7.0)
kappa <- (diag(3) - matrix) %*% UniUnmapParameters(ThetaStar, "std")
sim <- getObs(UniGASSim(kappa = kappa, A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 10000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
estimates <- c(0.05427778, 0.19931094, -0.06164370, 0.50866837, 0.48738771, 0.05156327, 0.45007605, 0.50408632, 0.97757690)
fit_sim
matrix
sim <- getObs(UniGASSim(kappa = kappa, A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 100000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit_sim
kappa
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
b <- c(0.5, 0.5, 1)
B <- diag(b, 3, 3)
a <- c(0.5, 0.5, 0)
A <- diag(a, 3, 3)
ThetaStar <- c(0.1, 1.5, 7.0)
kappa <- (diag(3) - matrix) %*% UniUnmapParameters(ThetaStar, "std")
sim <- getObs(UniGASSim(kappa = kappa, A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 100000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit_sim
estimates <- c(0.05300069, 0.21169024, -0.26843797, 0.50654555, 0.50480468, 0.15466132, 0.50418729, 0.48680200, 0.89775089)
std_errors <- c(0.003373788, 0.006667567, 0.446886694, 0.006461469, 0.009137489, 0.259361392, 0.008726361, 0.012508924, 0.170049141)
upper<- estimates +1.96*std_errors
lower<-estimates-1.96*std_errors
interval<-data.frame(value=c(kappa, rep(0.5, 6)), lower=lower,  upper=upper)
interval
interval<-data.frame(value=c(kappa, a, b), lower=lower,  upper=upper)
interval
kappa
# fit <-
#   UniGASFit(spec, ret, fn.optimizer = fn.optim, Compute.SE = TRUE)
b <- c(0.5, 0.5, 1)
B <- diag(b, 3, 3)
a <- c(0.5, 0.5, 0)
A <- diag(a, 3, 3)
ThetaStar <- c(0.1, 1.5, 7.0)
kappa <- (diag(3) - B) %*% UniUnmapParameters(ThetaStar, "std")
sim <- getObs(UniGASSim(kappa = kappa, A = matrix, B = matrix, Dist = name, ScalingType = 'Identity', T.sim = 100000))
fit_sim <-
UniGASFit(spec, sim, fn.optimizer = fn.optim, Compute.SE = TRUE)
fit_sim
kappa
